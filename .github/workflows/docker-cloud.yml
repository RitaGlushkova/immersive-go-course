name: Docker cloud test and deploy
on: [push]
defaults:
  run:
    working-directory: docker-cloud
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "docker-cloud/go.mod"
          cache-dependency-path: docker-cloud/go.sum
          cache: true

      - name: Build
        run: docker build -t docker-cloud:latest .

      - name: Test
        run: go test -v ./...

  publish:
    runs-on: ubuntu-latest
    needs:
      - test
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::297880250375:role/GitHubActionECRPublicPushImage
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: b8c6e9l3
          REPOSITORY: immersive-go-course/docker-cloud-rita
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

  # terraform:
  #   name: Terraform Infrastructure Change Management
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #     - publish

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2

  #     - name: Terraform fmt
  #       working-directory: docker-cloud/terraform
  #       id: fmt
  #       run: terraform fmt -check
  #       continue-on-error: true

  #     - name: Terraform Init
  #       working-directory: docker-cloud/terraform
  #       id: init
  #       run: terraform init -backend-config="bucket=rita-terraform-state"

  #     - name: Terraform Validate
  #       working-directory: docker-cloud/terraform
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       working-directory: docker-cloud/terraform
  #       id: plan
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - uses: actions/github-script@v6
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
  #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
  #           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

  #           <details><summary>Validation Output</summary>

  #           \`\`\`\n
  #           ${{ steps.validate.outputs.stdout }}
  #           \`\`\`

  #           </details>

  #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

  #           <details><summary>Show Plan</summary>

  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           \`\`\`

  #           </details>
  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform Plan Status
  #       working-directory: docker-cloud/terraform
  #       if: steps.plan.outcome == 'failure'
  #       run: exit 1

  #     - name: Terraform Apply
  #       working-directory: docker-cloud/terraform
  #       run: terraform apply -auto-approve -input=false
